# azure-pipelines.yml
# Azure DevOps Pipeline for running Pester tests
# Quality Engineer: Adjust pool, paths, and reporting as needed

# Pipeline variables - customize for your environment
variables:
  # Azure connection details - reference these in your variable group or library
  - group: azure-connection-details
  # Azure resources to test
  - name: resourceGroup
    value: 'qa-test-rg'
  - name: location
    value: 'canadaeast'

trigger:
  - main

pool:
  vmImage: 'windows-latest'

stages:
- stage: Test
  displayName: 'Run Pester Tests'
  jobs:
  - job: PesterTests
    displayName: 'Azure Resources Validation'
    steps:
    - task: AzurePowerShell@5
      displayName: 'Install Required Modules'
      inputs:
        azureSubscription: 'your-service-connection-name'
        ScriptType: 'InlineScript'
        Inline: |
          Install-Module -Name Pester -Force -SkipPublisherCheck -RequiredVersion 5.3.1
          Install-Module -Name Az.Storage -Force
          Install-Module -Name Az.Resources -Force
          Install-Module -Name Az.Accounts -Force
        azurePowerShellVersion: 'LatestVersion'
        pwsh: true
        
    - task: AzurePowerShell@5
      displayName: 'Run Pester Tests'
      inputs:
        azureSubscription: 'your-service-connection-name'
        ScriptType: 'InlineScript'
        Inline: |
          # Get test configuration variables
          $env:RESOURCE_GROUP = "$(resourceGroup)"
          $env:LOCATION = "$(location)"
          
          # Run tests with detailed output
          $pesterConfig = New-PesterConfiguration
          $pesterConfig.TestResult.Enabled = $true
          $pesterConfig.TestResult.OutputFormat = "NUnitXml"
          $pesterConfig.TestResult.OutputPath = "TestResults.xml"
          $pesterConfig.Output.Verbosity = "Detailed"
          
          Invoke-Pester -Configuration $pesterConfig -Path ./src
        azurePowerShellVersion: 'LatestVersion'
        pwsh: true

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/TestResults.xml'
        failTaskOnFailedTests: true
        
    # For Xray Jira integration
    - task: PowerShell@2
      displayName: 'Export Results to Xray (Jira)'
      condition: always()
      inputs:
        targetType: 'inline'
        script: |
          # Quality Engineer: Replace with your actual Xray export script
          # Example of exporting test results to Xray
          $testResults = [xml](Get-Content -Path TestResults.xml)
          $totalTests = $testResults.test-results.'total'
          $failedTests = $testResults.test-results.'failures'
          
          Write-Host "Total Tests: $totalTests, Failed: $failedTests"
          Write-Host "Export to Xray would happen here..."
          # Actual export code would use Xray REST API or specialized tools
